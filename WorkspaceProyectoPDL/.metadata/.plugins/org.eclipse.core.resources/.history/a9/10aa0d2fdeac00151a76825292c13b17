P -> B Z P | F Z P | Z P | eof.
Z -> cr Z' | LAMBDA.
Z' -> Z.
B -> var T id | if ( E ) S | S | for ( S ; E ; E ) { Z C }.
S -> id S' | return X | write ( E ) | prompt ( id ).
S' -> = E | %= E | ( L ).
T -> int | boolean | char.
X -> E | LAMBDA.
L -> E Q | LAMBDA.
Q -> , E Q | LAMBDA.
F -> function H id ( A )  Z { Z C }.
H -> T | LAMBDA.
A -> T id K | LAMBDA.
K -> , T id K | LAMBDA.
C -> B Z C | break | LAMBDA.
E -> U E'.
E' -> && U E' | LAMBDA.
U -> V U'.
U' -> + V U' | LAMBDA.
V -> id V' | ( E ) | entero | cadena.
V' -> ( L ) | LAMBDA.

First(P) = { eof, cr, var, id, if, for, return, write, prompt, function }
Follow(P) = { $ }

First(Z) = { cr, λ }
Follow(Z) = { eof, cr, var, id, if, for, {, }, return, write, prompt, function, break }

First(Z') = { cr, λ }
Follow(Z') = { eof, cr, var, id, if, for, {, }, return, write, prompt, function, break }

First(B) = { var, id, if, for, return, write, prompt }
Follow(B) = { eof, cr, var, id, if, for, }, return, write, prompt, function, break }

First(S) = { id, return, write, prompt }
Follow(S) = { cr, LAMBDA, ; }

First(S') = { (, =, %=n }
Follow(S') = { cr, LAMBDA, ; }

First(T) = { int, boolean, char }
Follow(T) = { id }

First(X) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(X) = { $ }

First(L) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(L) = { $ }

First(Q) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(Q) = { $ }

First(F) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(F) = { $ }

First(H) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(H) = { $ }

First(A) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(A) = { $ }

First(K) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(K) = { $ }

First(C) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(C) = { $ }

First(E) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(E) = { $ }

First(E') = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(E') = { $ }

First(U) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(U) = { $ }

First(U') = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(U') = { $ }

First(V) = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(V) = { $ }

First(V') = { eof, cr, LAMBDA, var, id, if, for, return, write, prompt, function }
Follow(V') = { $ }

http://mdaines.github.io/grammophone/#/ll1-table