grammar AnalizLex;

options
{
  // antlr will generate java lexer and parser
  language = Java;
  // generated parser should create abstract syntax tree
  output = AST;
}

//as the generated lexer will reside in org.meri.antlr_step_by_step.parsers 
//package, we have to add package declaration on top of it
@lexer::header {
package analizadorlex;
}

//as the generated parser will reside in org.meri.antlr_step_by_step.parsers 
//package, we have to add package declaration on top of it
@parser::header {
package analizadorlex;
}

// ***************** lexer rules:
//the grammar must contain at least one lexer rule
SALUTATION:'Hello word';   
ENDSYMBOL:'!';
r   : 'hello' ID;


ID  : [a-z]+ ;
WS  : [ \t\r\n]+ -> skip ;
S	: ';' | ',' | '(' | ')' | '{' | '}' | '+' | EOF | l A | d D | '=' E | '&' F | '"' C | '/' B | '%' M;
A	: l A | d Ap | '_' Ap | ;
Ap	: l Ap | d Ap | '_' Ap | ;
D	: d D | ;
E	: '=' | ;
F	: '&';
C	: c C | '"';
B	: '*' Bp;
Bp	: b Bp | '*' Bpp;
Bpp	: '/' S | bp Bp | '*' Bpp;
M	: '=';
l	: ('a'..'z' | 'A'..'Z')+;
d	: ('0'..'9')+;

// ***************** parser rules:
//our grammar accepts only salutation followed by an end symbol
expression : SALUTATION ENDSYMBOL;
