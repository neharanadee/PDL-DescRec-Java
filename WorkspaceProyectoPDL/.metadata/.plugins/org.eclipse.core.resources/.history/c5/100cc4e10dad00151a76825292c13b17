/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizadorlex;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author arturo
 */
public class Main {

	/**
	 * Muestra un menu para elegir la opcion
	 * mas conveniente
	 * @param args the command line arguments
	 */
	static Yytoken tokenActual = null;
	static AnalizadorLexico a = null;
	public static void main(String[] args) {
		int opcion = 0;

		java.util.Scanner in = new java.util.Scanner(System.in);

		System.out.println("Seleccione una opción:");
		System.out.println("1) Generar Analizador Léxico a partir de alexico.flex");
		System.out.println("2) Ejecutar archivo entrada.txt");
		System.out.print("Opcion: ");
		opcion = in.nextInt();
		switch (opcion) {
		case 1: {
			System.out.println("\n*** Generando ***\n");
			System.out.println("\n*** Procesando archivo alexico.flex ***\n");
			String archLex = "alexico.flex";
			String[] entrada = {archLex};
			jflex.Main.main(entrada);
			//Movemos el archivo generado al directorio src
			File arch = new File("AnalizadorLexico.java");
			if(arch.exists()){
				System.out.println("" + arch);
				Path currentRelativePath = Paths.get("");
				String nuevoDir = currentRelativePath.toAbsolutePath().toString()
						+ File.separator + "src" + File.separator 
						+ "analizadorlex" + File.separator+arch.getName();
				File archViejo = new File(nuevoDir);
				archViejo.delete();
				if(arch.renameTo(new File(nuevoDir))){
					System.out.println("\n*** Generado ***\n");
					System.out.println("\n*** Saliendo automaticamente ***\n");
					System.exit(0);
				}else{
					System.out.println("\n*** No generado ***\n");
				}
			}else{
				System.out.println("\n*** Codigo no existente ***\n");
			}
			break;
		}
		case 2: {
			throw new RuntimeException("Error en P, no se ha aceptado ningún token");
//			String entrada = "";
//			System.out.println("\n*** Ejecutando ***\n");
//			System.out.println("\n*** Procesando archivo entrada.txt ***\n");
//			entrada = "entrada.txt";
//			BufferedReader bf = null;
//			
//			try {
//				bf = new BufferedReader(new FileReader(entrada));
//				a = new AnalizadorLexico(bf);
//				tokenActual = a.sigToken(); //Primer token
//				System.out.println("Primer token" + tokenActual);
//				P();
//				//				do {//Todo el código
//				//					token = a.sigToken();
//				//					System.out.println(token.toString());
//				//				} while (token != null);
//			} catch (Exception ex) {
//				Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//			} finally {
//				try {
//					bf.close();
//				} catch (IOException ex) {
//					Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//				}
//			}
//			System.out.println("\n*** Ejecucion finalizada ***\n");
//			break;
		}
		default: {
			System.out.println("Opcion no valida.");
			break;
		}
		}

	}
	public static void compToken(String token){
		if(tokenActual.token.equals(token)){
			try{
				tokenActual=a.sigToken();
			}catch (Exception ex) {
			}
		}else
			System.err.println("Para el carro, token inválido en comprobarToken");
	}

	public static void P(){
		if(tokenActual.token.equals("var") || tokenActual.tipo.equals("Id") || tokenActual.token.equals("if") || 
				tokenActual.token.equals("for") || tokenActual.token.equals("return") || tokenActual.token.equals("write")
				|| tokenActual.token.equals("prompt")){//First(BZP) = var, id, if, for, return, write, prompt
			B();
			Z();
			P();
		}else if (tokenActual.token.equals("function")){//First(FZP) = function
			F();
			Z();
			P();
		}else if (tokenActual.tipo.equals("eol")){//First(ZP) = cr
			Z();
			P();
		}else if (tokenActual.tipo.equals("eof")){//First(eof)
			//nothing
		}else {
			 throw new RuntimeException("Error en P, no se ha aceptado ningún token");
		}
			
	}
	public static void Z(){
		if(tokenActual.tipo.equals("eol")){//First(crZ') = cr
			Zp();
		}else
			System.err.println("Error en Z, no se ha aceptado ningún token");
	}
	public static void Zp(){
		if(tokenActual.tipo.equals("eol")){//First(Z) = cr
			Z();
		}else{
			//Otro carácter
		}
	}
	public static void B(){
		if(tokenActual.token.equals("var")){//First(varTid) = var
			compToken("var");
			
			
		}else if(tokenActual.token.equals("if")){// First(if(E)S) = if
			
		}else if(tokenActual.token.equals("id") || tokenActual.token.equals("return")
				|| tokenActual.token.equals("write")
				|| tokenActual.token.equals("prompt")){//First(S)= id, return, write, prompt
			
		}else if(tokenActual.token.equals("for")){//First(for(S;E;E)Z{ZC}) = for
			
		}else
			System.err.println("Error en B, no se ha aceptado ningún token");
	}
	public static void S(){
	}
	public static void Sp(){
	}
	public static void T(){
	}
	public static void X(){
	}
	public static void L(){
	}
	public static void Q(){
	}
	public static void F(){
	}
	public static void H(){
	}
	public static void A(){
	}
	public static void K(){
	}
	public static void C(){
	}
	public static void E(){
	}
	public static void Ep(){
	}
	public static void U(){
	}
	public static void Up(){
	}
	public static void V(){
	}
	public static void Vp(){
	}


}
