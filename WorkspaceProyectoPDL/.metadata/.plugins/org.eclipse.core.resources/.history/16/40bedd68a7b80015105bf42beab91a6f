P -> B Z P | F Z P | Z P | eof.
Z -> cr Z'.
Z' -> Z | oc.
B -> var T id W | if ( E ) S | S | for ( S ; E ; S ) Z { Z C }.
W -> , id W | = E W | LAMBDA.
S -> id S' | return X | write ( E ) | prompt ( id ).
S' -> = E | %= E | ( L ).
T -> int | boolean | char.
X -> E | LAMBDA.
L -> E Q | LAMBDA.
Q -> , E Q | LAMBDA.
F -> function H id ( A ) Z { Z C }.
H -> T | LAMBDA.
A -> T id K | LAMBDA.
K -> , T id K | LAMBDA.
C -> B Z C | break | LAMBDA.
E -> G E'.
E' -> %= G E' | LAMBDA.
G -> R G'.
G' -> && R G' | LAMBDA.
R -> U R'.
R' -> == U R' | LAMBDA.
U -> V U'.
U' -> + V U' | LAMBDA.
V -> id V' | ( E ) | num | cadena | true | false.
V' -> ( L ) | LAMBDA.

First(P) = { eof, var, if, for, id, return, write, prompt, cr, function }
Follow(P) = { $ }

First(Z) = { cr }
Follow(Z) = { break, var, if, for, id, return, write, prompt, {, eof, cr, function, } }

First(Z') = { oc, cr }
Follow(Z') = { break, var, if, for, id, return, write, prompt, {, eof, cr, function, } }

First(B) = { var, if, for, id, return, write, prompt } 
Follow(B) = { cr }

First(W) = { ,, =, λ }
Follow(W) = { cr }

First(S) = { id, return, write, prompt }
Follow(S) = { ;, ), cr }

First(S') = { =, %=, ( }
Follow(S') = { ;, ), cr }

First(T) = { int, boolean, char }
Follow(T) = { id }

First(X) = { λ, id, (, num, cadena, true, false }
Follow(X) = { ;, ), cr }

First(L) = { λ, id, (, num, cadena, true, false }
Follow(L) = { ) }

First(Q) = { ,, λ }
Follow(Q) = { ) }

First(F) = { function }
Follow(F) = { cr }

First(H) = { λ, int, boolean, char }
Follow(H) = { id }

First(A) = { λ, int, boolean, char }
Follow(A) = { ) }

First(K) = { ,, λ }
Follow(K) = { ) }

First(C) = { break, λ, var, if, for, id, return, write, prompt }
Follow(C) = { } }

First(E) = { id, (, num, cadena, true, false }
Follow(E) = { ), ,, =, ;, cr }

First(E') = { %=, λ }
Follow(E') = { ), ,, =, ;, cr }

First(G) = { id, (, num, cadena, true, false }
Follow(G) = { %=, ), ,, =, ;, cr }

First(G') = { &&, λ }
Follow(G') = { %=, ), ,, =, ;, cr }

First(R) = { id, (, num, cadena, true, false }
Follow(R) = { &&, %=, ), ,, =, ;, cr }

First(R') = { ==, λ }
Follow(R') = { &&, %=, ), ,, =, ;, cr }

First(U) = { id, (, num, cadena, true, false }
Follow(U) = { ==, &&, %=, ), ,, =, ;, cr }

First(U') = { +, λ }
Follow(U') = { ==, &&, %=, ), ,, =, ;, cr }

First(V) = { id, (, num, cadena, true, false }
Follow(V) = { +, ==, &&, %=, ), ,, =, ;, cr }

First(V') = { (, λ }
Follow(V') = { +, ==, &&, %=, ), ,, =, ;, cr }

http://mdaines.github.io/grammophone/#/ll1-table
http://hackingoff.com/compilers/predict-first-follow-set